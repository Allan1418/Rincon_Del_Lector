openapi: 3.0.3
info:
  title: API Documentation
  version: 1.0.0
  description: Your API description
paths:
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomLoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomLoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomLoginRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/change/:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomPasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomPasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomPasswordResetRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomPasswordResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomPasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomPasswordResetConfirmRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/registration/:
    post:
      operationId: auth_registration_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegisterRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRegister'
          description: ''
  /api/auth/user/:
    get:
      operationId: auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
    put:
      operationId: auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUserDetailsRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
    patch:
      operationId: auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetailsRequest'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
  /api/business/cart/:
    get:
      operationId: business_cart_list
      description: Obtener el carrito actual del usuario con lista de IDs de libros
      tags:
      - business
      security:
      - tokenAuth: []
      responses:
        '200':
          description: Carrito obtenido exitosamente
  /api/business/cart/agregar/:
    post:
      operationId: business_cart_agregar_create
      description: Agregar un libro al carrito de compras
      tags:
      - business
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartActionRequest'
            examples:
              EjemploSolicitud:
                value:
                  book_id: 123e4567-e89b-12d3-a456-426614174000
                summary: Ejemplo solicitud
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartActionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartActionRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          description: Libro agregado exitosamente
        '400':
          description: Error en la solicitud
        '404':
          description: Libro no encontrado
  /api/business/cart/comprar/:
    post:
      operationId: business_cart_comprar_create
      description: Realizar compra de los libros en el carrito
      tags:
      - business
      security:
      - tokenAuth: []
      responses:
        '200':
          description: Compra realizada exitosamente
        '400':
          description: Error en la compra
  /api/business/cart/quitar/:
    delete:
      operationId: business_cart_quitar_destroy
      description: Remover un libro del carrito de compras
      tags:
      - business
      security:
      - tokenAuth: []
      responses:
        '200':
          description: Libro removido exitosamente
        '404':
          description: Libro no encontrado en el carrito
  /api/business/owner-earnings/:
    get:
      operationId: business_owner_earnings_retrieve
      tags:
      - business
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerEarnings'
          description: ''
  /api/business/purchase-history/:
    get:
      operationId: business_purchase_history_retrieve
      tags:
      - business
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseHistory'
          description: ''
  /api/libros/:
    get:
      operationId: libros_list
      description: "\n        Obtiene una lista paginada de libros con múltiples opciones\
        \ de filtrado y ordenamiento.\n        "
      summary: Lista de libros
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -price
          - -published_date
          - -title
          - least_purchased
          - most_purchased
          - price
          - published_date
          - title
        description: Ordenamiento de resultados
        examples:
          MásVendidosPrimero:
            value: most_purchased
            summary: Más vendidos primero
          PrecioAscendente:
            value: price
            summary: Precio ascendente
          MásRecientesPrimero:
            value: -published_date
            summary: Más recientes primero
      - in: query
        name: owned
        schema:
          type: boolean
        description: Filtra libros propiedad del usuario autenticado
        examples:
          EjemploTrue:
            value: 'true'
            summary: Solo mis libros
      - in: query
        name: owner
        schema:
          type: string
        description: Busqueda por username
        examples:
          BusquedaPorPalabraClave:
            value: juanPerez22
            summary: Busqueda por palabra clave
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: purchased
        schema:
          type: boolean
        description: Filtra libros comprados por el usuario autenticado
        examples:
          EjemploTrue:
            value: 'true'
            summary: Libros comprados
      - in: query
        name: search
        schema:
          type: string
        description: Busqueda por titulo o sinopsis
        examples:
          BusquedaPorPalabraClave:
            value: The Witcher
            summary: Busqueda por palabra clave
      tags:
      - libros
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLibroList'
          description: ''
    post:
      operationId: libros_create
      tags:
      - libros
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibroRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LibroRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LibroRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Libro'
          description: ''
  /api/libros/{id}/:
    get:
      operationId: libros_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this libro.
        required: true
      tags:
      - libros
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Libro'
          description: ''
    put:
      operationId: libros_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this libro.
        required: true
      tags:
      - libros
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibroRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LibroRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LibroRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Libro'
          description: ''
    patch:
      operationId: libros_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this libro.
        required: true
      tags:
      - libros
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLibroRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLibroRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLibroRequest'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Libro'
          description: ''
    delete:
      operationId: libros_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this libro.
        required: true
      tags:
      - libros
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/libros/{id}/get_file/:
    get:
      operationId: libros_get_file_retrieve
      description: Descarga el archivo EPUB (dueño o compradores)
      summary: Descargar archivo EPUB
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this libro.
        required: true
      tags:
      - libros
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            file/epub:
              schema:
                type: string
                format: binary
          description: Archivo Epub
        '403':
          description: Acceso denegado
        '404':
          description: Archivo no encontrado
  /api/libros/{id}/get_image/:
    get:
      operationId: libros_get_image_retrieve
      description: Descarga la imagen del libro en formato WEBP
      summary: Obtener imagen del libro
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this libro.
        required: true
      tags:
      - libros
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            image/webp:
              schema:
                type: string
                format: binary
          description: Imagen WEBP
        '404':
          content:
            application/json:
              schema:
                type: string
          description: Imagen no encontrada
  /api/libros/{id}/upload_file/:
    post:
      operationId: libros_upload_file_create
      description: Sube el archivo EPUB del libro (solo owner)
      summary: Subir archivo EPUB del libro
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this libro.
        required: true
      tags:
      - libros
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LibroRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          description: Archivo actualizado
        '403':
          description: No eres el owner
        '400':
          description: Archivo inválido
  /api/libros/{id}/upload_image/:
    post:
      operationId: libros_upload_image_create
      description: Sube una imagen para el libro
      summary: Subir imagen del libro
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this libro.
        required: true
      tags:
      - libros
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LibroRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          description: Imagen actualizada
        '403':
          description: No eres el owner
        '400':
          description: Error en la imagen
        '404':
          description: Libro no encontrado
  /api/users/{username}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - users
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
          description: ''
  /api/users/follow/{username}/:
    post:
      operationId: users_follow_create
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicShortUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicShortUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicShortUserRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicShortUser'
          description: ''
    delete:
      operationId: users_follow_destroy
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/users/followers/:
    get:
      operationId: users_followers_retrieve
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicShortUser'
          description: ''
  /api/users/following/:
    get:
      operationId: users_following_retrieve
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicShortUser'
          description: ''
  /api/users/image/:
    post:
      operationId: users_image_create
      tags:
      - users
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Éxito
        '400':
          content:
            application/json:
              schema:
                type: string
          description: Error
  /api/users/image/{filename}/:
    get:
      operationId: users_image_retrieve
      parameters:
      - in: path
        name: filename
        schema:
          type: string
        description: Nombre único del archivo
        required: true
      tags:
      - users
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
                format: binary
          description: Imagen WEBP
        '404':
          content:
            application/json:
              schema:
                type: string
          description: Error 404
  /api/users/search/:
    get:
      operationId: users_search_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: q
        schema:
          type: string
        description: Texto de busqueda para filtrar usuarios por nombre de usuario
          sin matchcase.
      tags:
      - users
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublicShortUserList'
          description: ''
components:
  schemas:
    CartActionRequest:
      type: object
      properties:
        book_id:
          type: string
          format: uuid
      required:
      - book_id
    CustomLoginRequest:
      type: object
      properties:
        login:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
      - login
      - password
    CustomPasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          writeOnly: true
          minLength: 1
        new_password2:
          type: string
          writeOnly: true
          minLength: 1
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    CustomPasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    CustomRegister:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
      required:
      - email
      - username
    CustomRegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
        password1:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password1
      - password2
      - username
    CustomUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        email:
          type: string
          format: email
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        username:
          type: string
          pattern: ^[\w.@+-]+$
        about:
          type: string
          nullable: true
        followers_count:
          type: integer
          readOnly: true
        following_count:
          type: integer
          readOnly: true
        image_name:
          type: string
          readOnly: true
      required:
      - email
      - followers_count
      - following_count
      - image_name
      - pk
      - username
    CustomUserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        email:
          type: string
          format: email
          minLength: 1
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        username:
          type: string
          minLength: 1
          pattern: ^[\w.@+-]+$
        about:
          type: string
          nullable: true
          minLength: 1
      required:
      - email
      - username
    FileUploadRequest:
      type: object
      properties:
        image:
          type: string
          format: binary
      required:
      - image
    Libro:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        is_owner:
          type: boolean
          description: Verifica si el usuario actual es el owner del libro
          readOnly: true
        is_purchased:
          type: boolean
          description: Verifica si el usuario actual ha comprado el libro
          readOnly: true
        owner:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 200
        synopsis:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        published_date:
          type: string
          format: date
          readOnly: true
      required:
      - id
      - is_owner
      - is_purchased
      - owner
      - published_date
      - title
    LibroRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        synopsis:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - title
    MonthlyEarning:
      type: object
      properties:
        year:
          type: integer
        month:
          type: integer
        total:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - month
      - total
      - year
    OwnerEarnings:
      type: object
      properties:
        total_earnings:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        monthly_earnings:
          type: array
          items:
            $ref: '#/components/schemas/MonthlyEarning'
      required:
      - monthly_earnings
      - total_earnings
    PaginatedLibroList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Libro'
    PaginatedPublicShortUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PublicShortUser'
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PatchedCustomUserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        email:
          type: string
          format: email
          minLength: 1
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        username:
          type: string
          minLength: 1
          pattern: ^[\w.@+-]+$
        about:
          type: string
          nullable: true
          minLength: 1
    PatchedLibroRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        synopsis:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
    PublicShortUser:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        image_name:
          type: string
          readOnly: true
          nullable: true
      required:
      - image_name
      - username
    PublicShortUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - username
    PublicUser:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        about:
          type: string
          nullable: true
        image_name:
          type: string
          readOnly: true
          nullable: true
        followers_count:
          type: integer
          readOnly: true
        following_count:
          type: integer
          readOnly: true
        is_following:
          type: boolean
          readOnly: true
      required:
      - followers_count
      - following_count
      - image_name
      - is_following
      - username
    PurchaseHistory:
      type: object
      properties:
        fecha:
          type: string
          format: date-time
          readOnly: true
        titulo_libro:
          type: string
          readOnly: true
        id_libro:
          type: string
          format: uuid
          readOnly: true
        precio:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
      required:
      - fecha
      - id_libro
      - precio
      - titulo_libro
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
